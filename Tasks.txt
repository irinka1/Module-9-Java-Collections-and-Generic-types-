Task 1 - ArrayList
Write your class MyArrayList as an analog of the ArrayList class.
You can use 1 array to store data.
Methods
     add (T value) adds an element to the end
     remove (int index) deletes the item under the index
     clear () clears the collection
     size () returns the size of the collection
     get (int index) returns an element under the index
     
Task 2 - LinkedList
Write your class MyLinkedList as an analogue of the LinkedList class.
You can not use an array. Each element must be a separate mediator object (Node) that stores a reference to the last and next element of the collection (a doubly linked list).
Methods
     add (T value) adds an element to the end
     remove (int index) deletes the item under the index
     clear () clears the collection
     size () returns the size of the collection
     get (int index) returns an element under the index
     
Task 3 - Queue
Write your MyQueue class as an analogue of the Queue and LinkedList classes.
FIFO (first-in-first-out)
You can do either using Node or using an array.
Methods
     add (T value) adds an element to the end
     remove (int index) deletes the item under the index
     clear () clears the collection
     size () returns the size of the collection
     peek () returns the first item in the queue (FIFO)
     poll () returns the first item in the queue and removes it from the collection
     
Task 4 - Stack
Write your MyStack class as an analog of the Stack class.
LIFO (last-in-first-out)
You can do either using Node or using an array.
Methods
     push (T value) adds an element to the end
     remove (int index) deletes the item under the index
     clear () clears the collection
     size () returns the size of the collection
     peek () returns the first item in the stack (LIFO)
     pop () returns the first item on the stack and removes it from the collection
     
Task 5 - HashMap
Write your class MyHashMap as an analog of the HashMap class.
You need to do it with a single-ended Node.
Can not store two nodes with the same keys at the same time.
Methods
     put (T key, K value) adds a key + value pair
     remove (T key) deletes a key pair
     clear () clears the collection
     size () returns the size of the collection
     get (T key) returns the value (K value) by key
